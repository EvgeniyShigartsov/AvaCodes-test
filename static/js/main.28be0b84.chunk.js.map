{"version":3,"sources":["store/characters/types.ts","components/Header/Title/Title.tsx","hooks/useTypedSelector.ts","utils/contants.ts","store/favorites/types.ts","utils/helpers.ts","store/characters/actions.ts","store/favorites/actions.ts","store/combinedCreators.ts","hooks/useActions.ts","store/characters/reducer.ts","store/characters/selectors.ts","components/Header/Filter/FilmsList/FilmsList.tsx","components/Header/Filter/SpeciesList/SpeciesList.tsx","components/Header/Filter/YearsSlider/YearsSlider.tsx","components/Header/Filter/Filter.tsx","components/Header/Header.tsx","styles/icons.tsx","components/CharactersList/CharacterItem/CharacterItem.tsx","components/Loader/Loader.tsx","components/Empty/Empty.tsx","components/CharactersList/CharactersList.tsx","store/favorites/reducer.ts","store/favorites/selectors.ts","components/FavoritesList/FavoritesList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["CharactersActionTypes","Title","span","useTypedSelector","useSelector","FavoritesActionTypes","favoritesLSKey","charactersLSKey","getCharactersFromLS","characters","localStorage","getItem","JSON","parse","getFavoritesFromLS","getPeoplesPageData","url","a","axios","get","then","response","data","catch","err","getCharacterSpecies","specieURL","name","getCharactersMovies","movieURLs","movies","i","length","currentURL","push","title","episode_id","getCharactersStarships","starshipURLs","starships","getCharacters","result","current","species","character","specie","films","birthYear","birth_year","Math","floor","random","setFullCharactersData","dispatch","charactersLS","type","types","GET_CHARACTERS_SUCCESS","payload","GET_CHARACTERS_START","nextPageUrl","pageData","next","results","pageCharacters","GET_CHARACTERS_ERROR","setItem","stringify","setFilterData","options","reduce","acc","map","f","uniqeMovies","Array","from","Set","uniqeSpecies","birthYearsRangeStatic","births","BBYmin","ABYmax","BBYDates","ABYDAtes","forEach","birth","isBirthDateBBY","toUpperCase","endsWith","isBirthDateABY","year","parseFloat","temp","max","getBirthYearsRange","SET_FILTER_OPTIONS","allMovies","allSpecies","UPDATE_FILTER_PARAMS","movie","birthYearsRange","min","filterCharacters","incomingParam","getState","filterParams","paramToUpdate","value","updatedParams","isBBYDateSelected","formattedMin","abs","filtered","filter","char","some","isBirthBBY","isBirthABY","charBirthYear","SET_FILTERED_CHARACTERS","setFavoritesList","items","UPDATE_FAVORITE_CHARACTERS","addNewCharacter","prevItems","updated","deleteCharacter","characterURL","setLastDraggedItem","SET_LAST_DRAGGED_ITEM","combinedCreators","charactersCreators","favoritesCreators","useActions","useDispatch","bindActionCreators","initialState","filteredCharacters","isLoading","error","MODULE_NAME","allCharactersSelector","state","filteredCharactersSelector","isLoadingSelector","errorSelector","allMoviesSelector","allSpeciesSelector","Option","Select","FilmsList","defaultValue","className","size","onChange","SpeciesList","speciesList","YearsSlider","range","onAfterChange","values","tipFormatter","tip","number","Number","isNaN","Filter","useEffect","align","AntdHeader","Layout","Header","deleteFromFavoritesIcon","width","height","viewBox","fill","xmlns","d","stroke","CharacterItem","onDragStart","removeFromFaviritesHandler","itemNo","draggable","deleteFromFavoritesBtn","useState","showBody","setShowBody","onClick","prev","icon","film","starship","Content","Loader","justify","style","Empty","description","CharactersList","isError","onDragStartHandler","message","warn","index","favoritesCharacters","lastDraggedItem","lastDraggedItemSelector","favoritesListSelector","FavoritesList","favorites","onDeleteBtnHandler","list","onDrop","e","preventDefault","onDragOver","App","rootReducer","combineReducers","charactersModule","action","favoritesModule","CLEAR_LAST_DRAGGED_ITEM","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28be0b84.chunk.js","sourcesContent":["import { ICharacter, IFilterParams } from '../../globalTypes/globalTypes';\r\n\r\nexport interface ICharactersState {\r\n  characters: ICharacter[],\r\n  filteredCharacters: ICharacter[],\r\n  allMovies: string[],\r\n  allSpecies: string[],\r\n  birthYearsRangeStatic: {\r\n    BBYmin: number,\r\n    ABYmax: number\r\n  }\r\n  isLoading: boolean,\r\n  error: string | null,\r\n  filterParams: IFilterParams\r\n}\r\n\r\nexport interface IResponseCharacter {\r\n  name: string,\r\n  birth_year: string,\r\n  url: string,\r\n  species: string[],\r\n  films: string[],\r\n  starships: string[],\r\n}\r\n\r\nexport interface IPeopleResponseData {\r\n  count: number\r\n  next: string | null\r\n  perevious: string | null\r\n  results: IResponseCharacter[]\r\n}\r\nexport interface ISpecieResponseData {\r\n  name: string\r\n}\r\n\r\nexport enum CharactersActionTypes {\r\n  GET_CHARACTERS_START = 'GET_CHARACTERS_START',\r\n  GET_CHARACTERS_SUCCESS = 'GET_CHARACTERS_SUCCESS',\r\n  GET_CHARACTERS_ERROR = 'GET_CHARACTERS_ERROR',\r\n  SET_FILTERED_CHARACTERS = 'SET_FILTERED_CHARACTERS',\r\n  SET_FILTER_OPTIONS = 'SET_FILTER_OPTIONS',\r\n  UPDATE_FILTER_PARAMS = 'UPDATE_FILTER_PARAMS',\r\n}\r\n\r\ninterface IGetCharactersAction {\r\n  type: CharactersActionTypes.GET_CHARACTERS_START,\r\n}\r\ninterface IGetCharactersSuccessAction {\r\n  type: CharactersActionTypes.GET_CHARACTERS_SUCCESS,\r\n  payload: ICharacter[]\r\n}\r\ninterface IGetCharactersErrorAction {\r\n  type: CharactersActionTypes.GET_CHARACTERS_ERROR,\r\n  payload: string\r\n}\r\ninterface IFilterCharactersAction {\r\n  type: CharactersActionTypes.SET_FILTERED_CHARACTERS,\r\n  payload: ICharacter[]\r\n}\r\ninterface ISetFilterOptionsAction {\r\n  type: CharactersActionTypes.SET_FILTER_OPTIONS,\r\n  payload:{\r\n    allMovies: string[],\r\n    allSpecies: string[],\r\n    birthYearsRangeStatic: {\r\n      BBYmin: number,\r\n      ABYmax: number,\r\n    }\r\n  }\r\n}\r\ninterface IUpdateFilterParamsAction {\r\n  type: CharactersActionTypes.UPDATE_FILTER_PARAMS,\r\n  payload: IFilterParams\r\n}\r\n\r\nexport type CharactersAction =\r\n  IGetCharactersAction\r\n  | IGetCharactersSuccessAction\r\n  | IGetCharactersErrorAction\r\n  | IFilterCharactersAction\r\n  | ISetFilterOptionsAction\r\n  | IUpdateFilterParamsAction\r\n\r\nexport type FilterOptionType = 'movie' | 'species' | 'birthYearsRange'\r\n","import { Col } from 'antd'\r\nimport React, { FC } from 'react'\r\n\r\nexport const Title: FC = () => (\r\n  <Col span={6}>\r\n    Star Wars characters list\r\n  </Col>\r\n)\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux'\r\nimport { RootState } from '../store/index'\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","export const DOMAIN = 'https://swapi.dev/api'\r\n\r\nexport const favoritesLSKey = 'favorites'\r\nexport const charactersLSKey = 'characters'\r\n","import { ICharacter } from '../../globalTypes/globalTypes';\r\n\r\nexport interface IFavoritesState {\r\n  favoritesCharacters: ICharacter[],\r\n  lastDraggedItem: ICharacter | null\r\n}\r\n\r\nexport enum FavoritesActionTypes {\r\n  UPDATE_FAVORITE_CHARACTERS = 'UPDATE_FAVORITE_CHARACTERS',\r\n  SET_LAST_DRAGGED_ITEM = 'SET_LAST_DRAGGED_ITEM',\r\n  CLEAR_LAST_DRAGGED_ITEM = 'CLEAR_LAST_DRAGGED_ITEM',\r\n}\r\n\r\ninterface ISetLastDraggedItem {\r\n  type: FavoritesActionTypes.SET_LAST_DRAGGED_ITEM\r\n  payload: ICharacter\r\n}\r\ninterface IClearLastDraggedItem {\r\n  type: FavoritesActionTypes.CLEAR_LAST_DRAGGED_ITEM,\r\n}\r\ninterface IUpdateFavoritesAction {\r\n  type: FavoritesActionTypes.UPDATE_FAVORITE_CHARACTERS,\r\n  payload: ICharacter[]\r\n}\r\n\r\nexport type FavoritesAction =\r\n  ISetLastDraggedItem\r\n  | IClearLastDraggedItem\r\n  | IUpdateFavoritesAction\r\n","import { charactersLSKey, favoritesLSKey } from './contants'\r\nimport { ICharacter } from '../globalTypes/globalTypes'\r\n\r\nexport const getCharactersFromLS = (): ICharacter[] => {\r\n  const characters = localStorage.getItem(charactersLSKey)\r\n  if (!characters) return []\r\n  return JSON.parse(characters)\r\n}\r\n\r\nexport const getFavoritesFromLS = (): ICharacter[] => {\r\n  const characters = localStorage.getItem(favoritesLSKey)\r\n  if (!characters) return []\r\n\r\n  return JSON.parse(characters)\r\n}\r\n\r\nexport const getBirthYearsRange = (births: string[]): {BBYmin: number, ABYmax: number} => {\r\n  if (!births.length) {\r\n    return {\r\n      BBYmin: 0,\r\n      ABYmax: 0,\r\n    }\r\n  }\r\n\r\n  const BBYDates: number[] = []\r\n  const ABYDAtes: number[] = []\r\n\r\n  births.forEach((birth) => {\r\n    const isBirthDateBBY = birth.toUpperCase().endsWith('BBY')\r\n    const isBirthDateABY = birth.toUpperCase().endsWith('ABY')\r\n\r\n    const year = parseFloat(birth)\r\n    if (isBirthDateBBY) BBYDates.push(year)\r\n    else if (isBirthDateABY) ABYDAtes.push(year)\r\n  })\r\n\r\n  const temp = Math.max(...BBYDates)\r\n  const BBYmin = temp - (temp * 2) // 5 - 5 * 2 = -5 ))\r\n  const ABYmax = Math.max(...ABYDAtes)\r\n\r\n  return { BBYmin, ABYmax }\r\n}\r\n","/* eslint-disable no-loop-func */\r\n/* eslint-disable no-await-in-loop */\r\nimport axios from 'axios';\r\nimport { Dispatch } from 'redux'\r\nimport {\r\n  IPeopleResponseData,\r\n  IResponseCharacter,\r\n  ISpecieResponseData,\r\n  CharactersAction,\r\n  CharactersActionTypes as types,\r\n  FilterOptionType,\r\n} from './types'\r\nimport {\r\n  ICharacter,\r\n  IFilm,\r\n  IStarship,\r\n  IFilterOptions,\r\n} from '../../globalTypes/globalTypes'\r\nimport { DOMAIN, charactersLSKey } from '../../utils/contants'\r\nimport { getCharactersFromLS, getBirthYearsRange } from '../../utils/helpers'\r\nimport { RootState } from '../index'\r\n\r\nconst getPeoplesPageData = async (url: string): Promise<IPeopleResponseData> => {\r\n  return axios.get<IPeopleResponseData>(url)\r\n    .then((response) => response.data)\r\n    .catch((err) => err.response)\r\n}\r\nconst getCharacterSpecies = async (specieURL: string): Promise<string> => {\r\n  if (!specieURL) return 'Human'\r\n\r\n  return axios.get<ISpecieResponseData>(specieURL)\r\n    .then((response) => response.data.name)\r\n    .catch(() => '')\r\n}\r\nconst getCharactersMovies = async (movieURLs: string[]): Promise<IFilm[]> => {\r\n  const movies: IFilm[] = []\r\n\r\n  for (let i = 0; i < movieURLs.length; i++) {\r\n    const currentURL = movieURLs[i]\r\n\r\n    await axios.get<IFilm>(currentURL)\r\n      .then((response) => movies.push(\r\n        {\r\n          title: response.data.title,\r\n          episode_id: response.data.episode_id,\r\n        },\r\n      ))\r\n      .catch(() => [])\r\n  }\r\n  return movies\r\n}\r\nconst getCharactersStarships = async (starshipURLs: string[]): Promise<IStarship[]> => {\r\n  const starships: IStarship[] = []\r\n  if (starshipURLs.length === 0) return starships\r\n\r\n  for (let i = 0; i < starshipURLs.length; i++) {\r\n    const currentURL = starshipURLs[i]\r\n\r\n    await axios.get<IStarship>(currentURL)\r\n      .then((response) => starships.push(\r\n        {\r\n          name: response.data.name,\r\n          url: response.data.url,\r\n        },\r\n      ))\r\n      .catch(() => [])\r\n  }\r\n  return starships\r\n}\r\n\r\nconst getCharacters = async (characters: IResponseCharacter[]): Promise<ICharacter[]> => {\r\n  const result: ICharacter[] = []\r\n\r\n  for (let i = 0; i < characters.length; i++) {\r\n    const current = characters[i]\r\n    const [specieURL] = current.species\r\n\r\n    const character = {} as ICharacter\r\n    const specie = await getCharacterSpecies(specieURL)\r\n    const movies = await getCharactersMovies(current.films)\r\n    const starships = await getCharactersStarships(current.starships)\r\n\r\n    character.name = current.name\r\n    character.url = current.url\r\n    character.birthYear = current.birth_year !== 'unknown' ? current.birth_year : `${Math.floor(Math.random() * 51)}ABY`\r\n    character.species = specie\r\n    character.films = movies\r\n    character.starships = starships\r\n\r\n    result.push(character)\r\n  }\r\n  return result\r\n}\r\n\r\nexport const setFullCharactersData = () => async (dispatch: Dispatch<CharactersAction>):Promise<void> => {\r\n  const charactersLS = getCharactersFromLS()\r\n  if (charactersLS.length) {\r\n    dispatch({ type: types.GET_CHARACTERS_SUCCESS, payload: charactersLS })\r\n    return\r\n  }\r\n  dispatch({ type: types.GET_CHARACTERS_START })\r\n\r\n  const characters: ICharacter[] = []\r\n\r\n  let nextPageUrl: string | null = `${DOMAIN}/people`\r\n\r\n  // Поскольку SWAPI на /people отдает только 10 персонажей, и не поддерживает запросы типа /people?perPage=100 ,\r\n  // Пришлось выдумывать вот такие костыли.\r\n\r\n  while (nextPageUrl !== null) {\r\n    try {\r\n      const pageData: IPeopleResponseData = await getPeoplesPageData(nextPageUrl)\r\n      nextPageUrl = pageData.next\r\n\r\n      const pageCharacters = await getCharacters(pageData.results)\r\n      characters.push(...pageCharacters)\r\n    } catch (e) {\r\n      nextPageUrl = null\r\n      dispatch(\r\n        {\r\n          type: types.GET_CHARACTERS_ERROR,\r\n          payload: 'Loading data has been failed. Probably SWAPI server has been shut down.',\r\n        },\r\n      )\r\n      return\r\n    }\r\n  }\r\n\r\n  dispatch({ type: types.GET_CHARACTERS_SUCCESS, payload: characters })\r\n  localStorage.setItem(charactersLSKey, JSON.stringify(characters))\r\n}\r\n\r\nexport const setFilterData = (characters: ICharacter[]) => (dispatch: Dispatch<CharactersAction>): void => {\r\n  const options = characters.reduce<IFilterOptions>((acc, character) => {\r\n    acc.movies.push(...character.films.map((f) => f.title))\r\n    acc.species.push(character.species)\r\n    acc.birth_year?.push(character.birthYear)\r\n    return acc\r\n  }, {\r\n    movies: [],\r\n    species: [],\r\n    birth_year: [],\r\n  })\r\n  const uniqeMovies = Array.from(new Set(options.movies))\r\n  const uniqeSpecies = Array.from(new Set(options.species))\r\n  const birthYearsRangeStatic = getBirthYearsRange(options.birth_year)\r\n\r\n  dispatch(\r\n    {\r\n      type: types.SET_FILTER_OPTIONS,\r\n      payload: {\r\n        allMovies: uniqeMovies,\r\n        allSpecies: uniqeSpecies,\r\n        birthYearsRangeStatic,\r\n      },\r\n    },\r\n  )\r\n  dispatch({\r\n    type: types.UPDATE_FILTER_PARAMS,\r\n    payload: {\r\n      movie: null,\r\n      species: null,\r\n      birthYearsRange: {\r\n        min: birthYearsRangeStatic.BBYmin,\r\n        max: birthYearsRangeStatic.ABYmax,\r\n      },\r\n    },\r\n  })\r\n}\r\n\r\nexport const filterCharacters = (incomingParam: [FilterOptionType, string | null | { min: number, max: number}]) => (\r\n  dispatch: Dispatch<CharactersAction>,\r\n  getState: () => RootState,\r\n): void => {\r\n  const { characters: { characters, filterParams } } = getState()\r\n  const [paramToUpdate, value] = incomingParam\r\n\r\n  const updatedParams = {\r\n    ...filterParams,\r\n    [paramToUpdate]: value,\r\n  }\r\n\r\n  const { movie, species, birthYearsRange: { min, max } } = updatedParams\r\n\r\n  const isBBYDateSelected = min < 0\r\n  const formattedMin = Math.abs(min)\r\n  // для корректной работы range слайдера пришлось BBY даты переводить в отрицательные числа\r\n\r\n  const filtered = characters\r\n    .filter((char) => {\r\n      if (movie === null) return true\r\n      return char.films.some((f) => f.title === movie)\r\n    })\r\n    .filter((char) => {\r\n      if (species === null) return true\r\n      return char.species === species\r\n    })\r\n    .filter((char) => {\r\n      // До того как я начал писать этот блок кода мне нравились звездные войны)).\r\n      // Думаю можно было написать эту часть на порядок проще, но нужно переосмыслить полностью подход.\r\n\r\n      const isBirthBBY = char.birthYear.toUpperCase().endsWith('BBY')\r\n      const isBirthABY = char.birthYear.toUpperCase().endsWith('ABY')\r\n      const charBirthYear = parseFloat(char.birthYear)\r\n\r\n      if (isBBYDateSelected) {\r\n        if (isBirthBBY) {\r\n          if (max <= 0) {\r\n            return charBirthYear <= formattedMin && charBirthYear >= Math.abs(max)\r\n          }\r\n          return charBirthYear <= formattedMin\r\n        }\r\n        if (isBirthABY && max < 0) return false\r\n        return charBirthYear <= max\r\n      }\r\n      if (isBirthBBY) return false\r\n      if (isBirthABY) {\r\n        if (max < 0) return false\r\n        return charBirthYear >= min && charBirthYear <= max\r\n      }\r\n      return charBirthYear >= formattedMin && charBirthYear <= max\r\n    })\r\n\r\n  dispatch({ type: types.SET_FILTERED_CHARACTERS, payload: filtered })\r\n  dispatch({ type: types.UPDATE_FILTER_PARAMS, payload: updatedParams })\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { FavoritesAction, FavoritesActionTypes as types } from './types'\r\nimport { ICharacter } from '../../globalTypes/globalTypes'\r\nimport { favoritesLSKey } from '../../utils/contants'\r\nimport { getFavoritesFromLS } from '../../utils/helpers'\r\n\r\nexport const setFavoritesList = () => (dispatch: Dispatch<FavoritesAction>): void => {\r\n  const items = getFavoritesFromLS()\r\n  dispatch({ type: types.UPDATE_FAVORITE_CHARACTERS, payload: items })\r\n}\r\n\r\nexport const addNewCharacter = (character: ICharacter) => (dispatch: Dispatch<FavoritesAction>): void => {\r\n  const prevItems = getFavoritesFromLS()\r\n\r\n  const isRepeated = prevItems.some((char) => char.url === character.url)\r\n  if (isRepeated) return\r\n\r\n  const updated = [...prevItems, character]\r\n  localStorage.setItem(favoritesLSKey, JSON.stringify(updated))\r\n\r\n  dispatch({ type: types.UPDATE_FAVORITE_CHARACTERS, payload: updated })\r\n}\r\n\r\nexport const deleteCharacter = (characterURL: string) => (dispatch: Dispatch<FavoritesAction>): void => {\r\n  const prevItems = getFavoritesFromLS()\r\n\r\n  const updated = prevItems.filter((char) => char.url !== characterURL)\r\n  localStorage.setItem(favoritesLSKey, JSON.stringify(updated))\r\n\r\n  dispatch({ type: types.UPDATE_FAVORITE_CHARACTERS, payload: updated })\r\n}\r\n\r\nexport const setLastDraggedItem = (character: ICharacter) => (dispatch: Dispatch<FavoritesAction>): void => {\r\n  dispatch({ type: types.SET_LAST_DRAGGED_ITEM, payload: character })\r\n}\r\n","import * as charactersCreators from './characters/actions'\r\nimport * as favoritesCreators from './favorites/actions'\r\n\r\n// Обьединил все action creators в один обьект, для хука useActions\r\n// Но в большм проекте наверное использовать такой способ не стал бы, из-за риска\r\n// получить конфликты имен.\r\n\r\nexport const combinedCreators = {\r\n  ...charactersCreators,\r\n  ...favoritesCreators,\r\n}\r\n","import { useDispatch } from 'react-redux'\r\nimport { bindActionCreators, ActionCreatorsMapObject } from 'redux'\r\nimport { combinedCreators } from '../store/combinedCreators'\r\n\r\nexport const useActions = (): ActionCreatorsMapObject => {\r\n  const dispatch = useDispatch()\r\n  return bindActionCreators(combinedCreators, dispatch)\r\n}\r\n","import { ICharactersState, CharactersAction, CharactersActionTypes as types } from './types'\r\n\r\nconst initialState: ICharactersState = {\r\n  characters: [],\r\n  filteredCharacters: [],\r\n  allMovies: [],\r\n  allSpecies: [],\r\n  birthYearsRangeStatic: {\r\n    BBYmin: 0,\r\n    ABYmax: 0,\r\n  },\r\n  isLoading: false,\r\n  error: null,\r\n  filterParams: {\r\n    movie: null,\r\n    species: null,\r\n    birthYearsRange: {\r\n      min: 0,\r\n      max: 0,\r\n    },\r\n  },\r\n}\r\nexport const MODULE_NAME = 'characters'\r\n\r\nexport const reducer = (state = initialState, action: CharactersAction): ICharactersState => {\r\n  switch (action.type) {\r\n    case types.GET_CHARACTERS_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      }\r\n    case types.GET_CHARACTERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        characters: action.payload,\r\n        filteredCharacters: action.payload,\r\n      }\r\n    case types.GET_CHARACTERS_ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload,\r\n      }\r\n    case types.SET_FILTER_OPTIONS:\r\n      return {\r\n        ...state,\r\n        allMovies: action.payload.allMovies,\r\n        allSpecies: action.payload.allSpecies,\r\n        birthYearsRangeStatic: action.payload.birthYearsRangeStatic,\r\n      }\r\n    case types.SET_FILTERED_CHARACTERS:\r\n      return {\r\n        ...state,\r\n        filteredCharacters: action.payload,\r\n      }\r\n    case types.UPDATE_FILTER_PARAMS:\r\n      return {\r\n        ...state,\r\n        filterParams: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { RootState } from '../index'\r\nimport { ICharacter } from '../../globalTypes/globalTypes'\r\nimport { MODULE_NAME } from './reducer'\r\n\r\nexport const allCharactersSelector = (state: RootState): ICharacter[] => state[MODULE_NAME].characters\r\nexport const filteredCharactersSelector = (state: RootState): ICharacter[] => state[MODULE_NAME].filteredCharacters\r\nexport const isLoadingSelector = (state: RootState): boolean => state[MODULE_NAME].isLoading\r\nexport const errorSelector = (state: RootState): string | null => state[MODULE_NAME].error\r\n\r\nexport const allMoviesSelector = (state: RootState): string[] => state[MODULE_NAME].allMovies\r\nexport const allSpeciesSelector = (state: RootState): string[] => state[MODULE_NAME].allSpecies\r\nexport const yearsRangeSelector = (state: RootState): {BBYmin: number, ABYmax: number} => state[MODULE_NAME].birthYearsRangeStatic\r\n","import React, { FC } from 'react'\r\nimport { Select, Col } from 'antd'\r\nimport { useTypedSelector } from '../../../../hooks/useTypedSelector'\r\nimport { useActions } from '../../../../hooks/useActions'\r\nimport { allMoviesSelector } from '../../../../store/characters/selectors'\r\n\r\nconst { Option } = Select\r\n\r\nexport const FilmsList: FC = () => {\r\n  const movies = useTypedSelector(allMoviesSelector)\r\n  const { filterCharacters } = useActions()\r\n\r\n  const onFilmChange = (movie: string) => {\r\n    const value = movie === 'allMovies' ? null : movie\r\n\r\n    filterCharacters(['movie', value])\r\n  }\r\n\r\n  return (\r\n    <Col span={6}>\r\n      <Select\r\n        defaultValue=\"allMovies\"\r\n        className=\"select-dropdown\"\r\n        size=\"large\"\r\n        onChange={onFilmChange}\r\n      >\r\n        <Option value=\"allMovies\">All Movies</Option>\r\n        {movies.map((movie) => <Option key={movie} value={movie}>{movie}</Option>)}\r\n      </Select>\r\n    </Col>\r\n  )\r\n}\r\n","import React, { FC } from 'react'\r\nimport { Select, Col } from 'antd'\r\nimport { useTypedSelector } from '../../../../hooks/useTypedSelector'\r\nimport { allSpeciesSelector } from '../../../../store/characters/selectors'\r\nimport { useActions } from '../../../../hooks/useActions'\r\n\r\nconst { Option } = Select\r\n\r\nexport const SpeciesList: FC = () => {\r\n  const speciesList = useTypedSelector(allSpeciesSelector)\r\n  const { filterCharacters } = useActions()\r\n\r\n  const onSpeciesChange = (species: string) => {\r\n    const value = species === 'allSpecies' ? null : species\r\n\r\n    filterCharacters(['species', value])\r\n  }\r\n\r\n  return (\r\n    <Col span={6}>\r\n      <Select\r\n        defaultValue=\"allSpecies\"\r\n        className=\"select-dropdown\"\r\n        size=\"large\"\r\n        onChange={onSpeciesChange}\r\n      >\r\n        <Option value=\"allSpecies\">All Species</Option>\r\n        {speciesList.map((specie) => <Option key={specie} value={specie}>{specie}</Option>)}\r\n      </Select>\r\n    </Col>\r\n  )\r\n}\r\n","import React, { FC } from 'react'\r\nimport { Col, Slider } from 'antd'\r\nimport { useActions } from '../../../../hooks/useActions'\r\n// import { useTypedSelector } from '../../../../hooks/useTypedSelector'\r\n// import { yearsRangeSelector } from '../../../../store/characters/selectors'\r\n\r\nexport const YearsSlider: FC = () => {\r\n  // const range = useTypedSelector(yearsRangeSelector)\r\n  // Тут что-то пошло не так. После обновления переменной range, ререндер просиходил, но defaultValue - оставалось прежним,\r\n  // Хотя значения туда уже попадали новые, дебажил достаточно долго, возможно фича самой библиотеки.\r\n  // Решил пока вручную поствить значения, и двигаться дальше.\r\n\r\n  const { filterCharacters } = useActions()\r\n\r\n  const onAfterChange = (values: [number, number]) => {\r\n    const [min, max] = values\r\n\r\n    filterCharacters(['birthYearsRange', { min, max }])\r\n  }\r\n  const tipFormatter = (tip: number | undefined) => {\r\n    const number = Number(tip)\r\n    if (Number.isNaN(number)) return null\r\n\r\n    return (\r\n      <span>\r\n        {Math.abs(number)}\r\n        {' '}\r\n        year\r\n        {' '}\r\n        {`${number >= 0 ? 'ABY' : 'BBY'}`}\r\n        {' '}\r\n      </span>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Col span={6} push={1}>\r\n      <Slider\r\n        range\r\n        min={-200}\r\n        max={50}\r\n        onAfterChange={onAfterChange}\r\n        defaultValue={[-200, 50]}\r\n        tipFormatter={tipFormatter}\r\n        className=\"slider\"\r\n      />\r\n      {/* <Slider\r\n        range\r\n        min={range.BBYmin}\r\n        max={range.ABYmax}\r\n        onAfterChange={onAfterChange}\r\n        defaultValue={[range.BBYmin, range.ABYmax]}\r\n        className=\"slider\"\r\n      /> */}\r\n    </Col>\r\n  )\r\n}\r\n","import React, { FC, useEffect } from 'react'\r\nimport { Col, Row } from 'antd'\r\nimport { FilmsList } from './FilmsList/FilmsList'\r\nimport { SpeciesList } from './SpeciesList/SpeciesList'\r\nimport { useTypedSelector } from '../../../hooks/useTypedSelector'\r\nimport { allCharactersSelector } from '../../../store/characters/selectors'\r\nimport { useActions } from '../../../hooks/useActions'\r\nimport { YearsSlider } from './YearsSlider/YearsSlider'\r\n\r\nexport const Filter: FC = () => {\r\n  const characters = useTypedSelector(allCharactersSelector)\r\n  const { setFilterData } = useActions()\r\n\r\n  useEffect(() => {\r\n    setFilterData(characters)\r\n  }, [characters])\r\n  return (\r\n    <Col span={18}>\r\n      <Row align=\"middle\">\r\n        <FilmsList />\r\n        <SpeciesList />\r\n        <YearsSlider />\r\n      </Row>\r\n    </Col>\r\n  )\r\n}\r\n","import { Layout, Row } from 'antd'\r\nimport React, { FC } from 'react'\r\nimport { Title } from './Title/Title'\r\nimport { Filter } from './Filter/Filter'\r\n\r\nconst { Header: AntdHeader } = Layout\r\n\r\nexport const Header: FC = () => (\r\n  <AntdHeader>\r\n    <Row>\r\n      <Title />\r\n      <Filter />\r\n    </Row>\r\n  </AntdHeader>\r\n)\r\n","import React from 'react'\r\n\r\nexport const deleteFromFavoritesIcon: React.ReactNode = (\r\n  <svg\r\n    width=\"13\"\r\n    height=\"13\"\r\n    viewBox=\"0 0 13 13\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path d=\"M0.5 0.5L12.5 12.5M0.5 12.5L12.5 0.5\" stroke=\"#424242\" />\r\n  </svg>\r\n)\r\n","import React, { FC, useState } from 'react'\r\nimport { Button } from 'antd'\r\nimport { ICharacter } from '../../../globalTypes/globalTypes'\r\nimport { deleteFromFavoritesIcon } from '../../../styles/icons'\r\n\r\ninterface CharacterItemProps {\r\n  character: ICharacter\r\n  itemNo: number,\r\n  draggable?: boolean\r\n  onDragStart?: ((character: ICharacter) => void) | null\r\n  removeFromFaviritesHandler?: ((character: ICharacter) => void) | null\r\n  deleteFromFavoritesBtn?: boolean\r\n}\r\n\r\nexport const CharacterItem: FC<CharacterItemProps> = (\r\n  {\r\n    character,\r\n    onDragStart,\r\n    removeFromFaviritesHandler,\r\n    itemNo,\r\n    draggable = false,\r\n    deleteFromFavoritesBtn = false,\r\n  },\r\n) => {\r\n  const [showBody, setShowBody] = useState<boolean>(false)\r\n\r\n  const {\r\n    name,\r\n    species,\r\n    films,\r\n    starships,\r\n    birthYear,\r\n  } = character\r\n\r\n  const onDragStartHandler = (): void => {\r\n    if (typeof onDragStart === 'function') {\r\n      onDragStart(character)\r\n    }\r\n  }\r\n  const onDeleteFromFavoritesHandler = () => {\r\n    if (typeof removeFromFaviritesHandler === 'function') {\r\n      removeFromFaviritesHandler(character)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"character-wrapper\"\r\n      draggable={draggable}\r\n      onDragStart={onDragStartHandler}\r\n    >\r\n      <div className=\"character-title\" onClick={() => setShowBody((prev) => !prev)}>\r\n        <span className=\"character-number\">\r\n          {itemNo}\r\n          .\r\n        </span>\r\n        <span className=\"character-name\">\r\n          {name}\r\n        </span>\r\n      </div>\r\n      {showBody && (\r\n      <div className=\"character-body\">\r\n        {deleteFromFavoritesBtn && (\r\n          <div className=\"delete-btn\">\r\n            <Button\r\n              size=\"small\"\r\n              icon={deleteFromFavoritesIcon}\r\n              onClick={onDeleteFromFavoritesHandler}\r\n            />\r\n          </div>\r\n        )}\r\n        <div className=\"character-spesies\">\r\n          Species:\r\n          {' '}\r\n          {species}\r\n        </div>\r\n        <div className=\"character-spesies\">\r\n          Birth year:\r\n          {' '}\r\n          {birthYear}\r\n        </div>\r\n        <div className=\"character-data\">\r\n          <span className=\"character-data-title\">Movies:</span>\r\n          <ul className=\"character-list-data\">\r\n            {films.map((film) => <li key={film.episode_id}>{film.title}</li>)}\r\n          </ul>\r\n        </div>\r\n        <div className=\"character-data\">\r\n          <span className=\"character-data-title\">Starships:</span>\r\n          {starships.length ? (\r\n            <ul>\r\n              {starships.map((starship) => <li key={starship.url}>{starship.name}</li>)}\r\n            </ul>\r\n          ) : <span>No starships found.</span> }\r\n        </div>\r\n        <div />\r\n      </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React, { FC } from 'react'\r\nimport {\r\n  Spin, Layout, Col, Row,\r\n} from 'antd'\r\n\r\nconst { Content } = Layout\r\nexport const Loader: FC = () => (\r\n  <Content>\r\n    <Row justify=\"center\" align=\"middle\" className=\"loader-box\">\r\n      <Col span={24}>\r\n        <Spin size=\"large\" tip=\"Loading characters data...\" style={{ width: '100%', height: '100%' }} />\r\n      </Col>\r\n    </Row>\r\n  </Content>\r\n)\r\n","import React, { FC } from 'react'\r\nimport {\r\n  Empty as AntdEmpty,\r\n  Layout,\r\n  Row,\r\n  Col,\r\n} from 'antd'\r\n\r\nconst { Content } = Layout\r\n\r\ninterface IEmptyProps {\r\n  type: 'FavoritesList' | 'CharactersList'\r\n}\r\n\r\nexport const Empty: FC<IEmptyProps> = ({ type }) => {\r\n  switch (type) {\r\n    case 'CharactersList':\r\n      return (\r\n        <Content>\r\n          <Row align=\"middle\">\r\n            <Col span={6} push={2}>\r\n              <AntdEmpty className=\"empty\" description={<span>No characters found with this criteries.</span>} />\r\n            </Col>\r\n          </Row>\r\n        </Content>\r\n      )\r\n    case 'FavoritesList':\r\n      return (\r\n        <Content>\r\n          <AntdEmpty className=\"empty\" description={<span>Add favorite character!</span>} />\r\n        </Content>\r\n      )\r\n    default:\r\n      return null\r\n  }\r\n}\r\n","import React, { FC } from 'react'\r\nimport { Layout, Col, message } from 'antd'\r\nimport { CharacterItem } from './CharacterItem/CharacterItem'\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector'\r\nimport { Loader } from '../Loader/Loader'\r\nimport { filteredCharactersSelector, isLoadingSelector, errorSelector } from '../../store/characters/selectors'\r\nimport { Empty } from '../Empty/Empty'\r\nimport { ICharacter } from '../../globalTypes/globalTypes'\r\nimport { useActions } from '../../hooks/useActions'\r\n\r\nconst { Content } = Layout\r\nexport const CharactersList: FC = () => {\r\n  const characters = useTypedSelector(filteredCharactersSelector)\r\n  const isLoading = useTypedSelector(isLoadingSelector)\r\n  const isError = useTypedSelector(errorSelector)\r\n  const { setLastDraggedItem } = useActions()\r\n\r\n  const onDragStartHandler = (character: ICharacter) => {\r\n    setLastDraggedItem(character)\r\n  }\r\n\r\n  if (isLoading) return <Loader />\r\n  if (!characters.length) return <Empty type=\"CharactersList\" />\r\n  if (isError) {\r\n    message.warn(isError, 3)\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Content>\r\n      <Col span={12} push={2}>\r\n        <h2>Selected Characters</h2>\r\n        <div>\r\n          {characters.map((character, index) => (\r\n            <CharacterItem\r\n              key={character.url}\r\n              character={character}\r\n              itemNo={index + 1}\r\n              draggable\r\n              onDragStart={onDragStartHandler}\r\n            />\r\n          ))}\r\n        </div>\r\n      </Col>\r\n    </Content>\r\n  )\r\n}\r\n","import { IFavoritesState, FavoritesAction, FavoritesActionTypes as types } from './types'\r\n\r\nconst initialState: IFavoritesState = {\r\n  favoritesCharacters: [],\r\n  lastDraggedItem: null,\r\n}\r\n\r\nexport const MODULE_NAME = 'favorites'\r\n\r\nexport const reducer = (state = initialState, action: FavoritesAction): IFavoritesState => {\r\n  switch (action.type) {\r\n    case types.UPDATE_FAVORITE_CHARACTERS:\r\n      return {\r\n        ...state,\r\n        favoritesCharacters: action.payload,\r\n      }\r\n    case types.SET_LAST_DRAGGED_ITEM:\r\n      return {\r\n        ...state,\r\n        lastDraggedItem: action.payload,\r\n      }\r\n    case types.CLEAR_LAST_DRAGGED_ITEM:\r\n      return {\r\n        ...state,\r\n        lastDraggedItem: null,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { RootState } from '../index'\r\nimport { MODULE_NAME } from './reducer'\r\nimport { ICharacter } from '../../globalTypes/globalTypes'\r\n\r\nexport const lastDraggedItemSelector = (state: RootState): ICharacter | null => state[MODULE_NAME].lastDraggedItem\r\nexport const favoritesListSelector = (state: RootState): ICharacter[] => state[MODULE_NAME].favoritesCharacters\r\n","import React, { FC, DragEvent } from 'react'\r\nimport { Layout, Col } from 'antd'\r\nimport { CharacterItem } from '../CharactersList/CharacterItem/CharacterItem'\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector'\r\nimport { ICharacter } from '../../globalTypes/globalTypes'\r\nimport { lastDraggedItemSelector, favoritesListSelector } from '../../store/favorites/selectors'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport { Empty } from '../Empty/Empty'\r\n\r\nconst { Content } = Layout\r\nexport const FavoritesList: FC = () => {\r\n  const lastDraggedItem = useTypedSelector(lastDraggedItemSelector)\r\n  const favorites = useTypedSelector(favoritesListSelector)\r\n  const { addNewCharacter, deleteCharacter } = useActions()\r\n\r\n  const dropHandler = (e: DragEvent<HTMLDivElement>): void => {\r\n    e.preventDefault()\r\n    addNewCharacter(lastDraggedItem)\r\n  }\r\n\r\n  const onDragOverPrevented = (e: DragEvent<HTMLDivElement>): void => {\r\n    e.preventDefault()\r\n  }\r\n\r\n  const onDeleteBtnHandler = (character: ICharacter): void => {\r\n    deleteCharacter(character.url)\r\n  }\r\n\r\n  const list = favorites.map((character, index) => (\r\n    <CharacterItem\r\n      key={character.url}\r\n      character={character}\r\n      itemNo={index + 1}\r\n      deleteFromFavoritesBtn\r\n      removeFromFaviritesHandler={onDeleteBtnHandler}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <Content>\r\n      <Col span={12} push={2}>\r\n        <h2>Favorites Characters</h2>\r\n        <div\r\n          className=\"favorites-list\"\r\n          onDrop={dropHandler}\r\n          onDragOver={onDragOverPrevented}\r\n        >\r\n          {favorites.length ? list : <Empty type=\"FavoritesList\" />}\r\n        </div>\r\n      </Col>\r\n    </Content>\r\n  )\r\n}\r\n","import React, { FC, useEffect } from 'react'\nimport { Layout, Row } from 'antd'\nimport { Header } from './components/Header/Header'\nimport { CharactersList } from './components/CharactersList/CharactersList'\nimport { useActions } from './hooks/useActions'\nimport { FavoritesList } from './components/FavoritesList/FavoritesList'\n\nconst App: FC = () => {\n  const { setFullCharactersData, setFavoritesList } = useActions()\n  useEffect(() => {\n    setFullCharactersData()\n    setFavoritesList()\n  }, [])\n\n  return (\n    <Layout>\n      <Header />\n      <Layout>\n        <Row>\n          <CharactersList />\n          <FavoritesList />\n        </Row>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { MODULE_NAME as charactersModule, reducer as charactersReducer } from './characters/reducer'\r\nimport { MODULE_NAME as favoritesModule, reducer as favoritesReducer } from './favorites/reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  [charactersModule]: charactersReducer,\r\n  [favoritesModule]: favoritesReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\nimport 'antd/dist/antd.css';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}